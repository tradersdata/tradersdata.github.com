{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"TradersData","tagline":"","body":"## General Information Re: TradersData Code.\r\n\r\n### Introduction\r\nMost of what will make its way to github from TradersData is the product of a financial markets trading venture that was built in large part on home-grown software (bash and Perl). Publishing the code is not to represent any specific claim(s) regarding innovation, but to indicate the range of experience.\r\n\r\nGiven the data-intensive nature of the business, many projects center around text data manipulation. There is also a strong bent towards automation with particular attention paid to robustness. Data extraction, transformation, staging and/or loading were mission critical tasks that ran unattended, overnight, and carried potential steep costs if not successfully completed before the business day began. Systems administration and cross-platform* interoperability are other areas of focus.\r\n\r\nAs any experienced developer will attest, reusable code makes us more productive. Libraries and other pieces written to facilitate development will be a significant portion of the published work.\r\n \r\nFor more on TradersData see http://tradersdata.com.\r\n\r\n\\* Systems include Linux, OS X (Free BSD), and Windows (cygwin).\r\n\r\n### Notes\r\nI had the good fortune to run a business that indulged a long-time passion for IT, and depended on the skills that quest produced. Because it was my own venture and time, projects could be undertaken that likely would not see the light of day if punching a company clock, or delegating to others. If a project intrigued me, even if reinventing the wheel, the added hours were mine alone to bear. I've likened it, not disingenuously, to running a parallel R&D unit.\r\n\r\nThere may be code segments, even entire projects, which cause head scratching. These must be understood as parts of a total body of work, in terms of variety, original intent, and time frame. Some projects were always narrowly scoped with specific business requirements and others began as academic excursions, and excursions they were. I'm also guilty of becoming interested in new horizons at the expense of not revisiting projects that could benefit from a rewrite using knowledge gained from the first effort and/or incorporating subsequently updated or more recently learned language features.\r\n\r\nFor example, when I first started writing shell scripts, bash was at version 1.x.x, and lacked such things as arrays. (My current systems run 3.2.x and 4.2 was recently released.) My first Perl scripts were written in Perl 5, but at a time when people were still actively transitioning from Perl 4.\r\n\r\nEvery piece of code published supported an enterprise. (Much still does.) As such, the choice was often made not to fix what wasn't broken. It wasn't solely the distractions of new academic itches that prevented a return to old work, but a legitimate business decision. Once a project was deployed, and absent cause, there were better outlets for my curiosity. Code that appears a bit long in the tooth, or lacking idiomatic style, probably is. And that was OK. \r\n\r\n### Conclusion\r\nIf this all sounds a bit defensive, that's not the intent. I've pushed boundaries for decades. Some code that will be published here has origins going back nearly 15 years. The entire body of work exhibits the full range of experience from rank beginner to the current day. Even code that is unimpressive today was produced from a commitment to learning of which I am proud and for which no apology is necessary.\r\n\r\nThere is no representation that any work is better, necessarily efficient, or elegant. There are, I believe, some interesting parts and even those areas which had a more fanciful start have proven useful over the years.\r\n\r\nMostly, publishing the work documents the fruits of a productive and fun journey. It's not for the specific functionality, but to indicate the breadth and depth of experience collected along the way. Of course, if someone finds something useful, that's a welcome outcome too.\r\n\r\n"}